java.util.*; import 
java.io.*; import 

{ Methods class public 
} } text; return s.close(); "</html>"; += text } "<br>"; += text s.nextLine(); += text { (s.hasNext()) while text file's the to text set and file alliterated the through loop // Scanner(alliterated); new = s Scanner "<html>"; = text String { FileNotFoundException throws getAlliteratedText() String public */ file. alliterations the of text The @return * * file. alliterations the on text the display to GUI the Allows * /** } w.close(); wordScanner.close(); one choose randomly // } } fiveLetterWords.add(word); { 5) == (word.length() if wordScanner.next(); = word String { (wordScanner.hasNext()) while arrayList the to words letter 5 add // ArrayList<String>(); new = fiveLetterWords ArrayList<String> Scanner(words); new = wordScanner Scanner PrintWriter(wordle); new = w PrintWriter File("src/game_files/wordle.txt"); new = wordle { FileNotFoundException throws words) wordle(File void public wordle literally // } w.close(); "); ". + gameWord + " is anagram w.println("Your } c; += gameWord { wordLetters) : c (Character for indexes of order random a get somehow // } wordLetters.add(word.charAt(i)); { i++) word.length(); < i 0; = i (int for ArrayList<Character>(); new = wordLetters ArrayList<Character> ""; = gameWord String wordScanner.close(); } wordScanner.nextLine(); = word { q++) nameIndex; < q 0; = q (int for ""; = word String (numWords)); * (Math.random() (int) = nameIndex int Scanner(words); new = wordScanner Scanner word random get // numWordsScanner.close(); } numWords++; numWordsScanner.nextLine(); { (numWordsScanner.hasNext()) while are there words many how out find // 0; = numWords int Scanner(words); new = numWordsScanner Scanner PrintWriter(anagram); new = w PrintWriter File("src/game_files/anagram.txt"); new = anagram { FileNotFoundException throws words) anagramGuesser(File void public ram a nag // } w.close(); } nounScanner.close(); adjectiveScanner.close(); nameScanner.close(); nounsList.clear(); adjectivesList.clear(); noun); + " " + adjective + " "'s + w.println(name 1))); - (nounsList.size() * (Math.random() nounsList.get((int) = noun startLetter with starts that noun random get // } } nounsList.add(nou); { 1).equals(startLetter)) (nou.substring(0, if nounScanner.nextLine(); = nou String { (nounScanner.hasNext()) while startLetter with start that nouns get // 1))); - (adjectivesList.size() * (Math.random() adjectivesList.get((int) = adjective startLetter with stars that adjective random get // } } adjectivesList.add(ad); { 1).equals(startLetter)) (ad.substring(0, if adjectiveScanner.nextLine(); = ad String { (adjectiveScanner.hasNext()) while startLetter with start that adjectives get // } 1); name.substring(0, = startLetter nameScanner.nextLine(); = name { q++) nameIndex; < q 0; = q (int for (numNames)); * (Math.random() (int) = nameIndex int name random get // Scanner(nouns); new = nounScanner Scanner Scanner(adjectives); new = adjectiveScanner Scanner Scanner(names); new = nameScanner Scanner { i++) reps; < i 0; = i (int for alliterations many however make // ArrayList<String>(); new = nounsList ArrayList<String> ArrayList<String>(); new = adjectivesList ArrayList<String> noun; String adjective; String ""; = name String ""; = startLetter String numNamesScanner.close(); } numNames++; numNamesScanner.nextLine(); { (numNamesScanner.hasNext()) while are there names many how out find // 0; = numNames int Scanner(names); new = numNamesScanner Scanner PrintWriter(alliterated); new = w PrintWriter File("src/altered_files/alliterated.txt"); new = alliterated { FileNotFoundException throws nouns) File adjectives, File names, File reps, alliterate(int void public */ void @return * noun. every contains that file The - nouns @param * adjective. every contains that file The - adjectives @param * name. every contains that file The - names @param * make. to alliterations of number The - reps @param * * wants. user the as alliterations many as with file text new a Creates * /** wordle; anagram, alliterated, File 




































































































































































